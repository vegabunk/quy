import streamlit as st
import cv2 as cv
import numpy as np
import joblib
from PIL import Image

# Load model
face_detector = cv.FaceDetectorYN.create(
    'face_detection_yunet_2023mar.onnx', "", (320, 320),
    score_threshold=0.9, nms_threshold=0.3, top_k=5000
)
face_recognizer = cv.FaceRecognizerSF.create('face_recognition_sface_2021dec.onnx', "")

svc = joblib.load('svc.pkl')
mydict = ['GIATHIEU','LEQUYEN','THANHQUY','UNKNOWN']

# H√†m visualize khu√¥n m·∫∑t
def visualize(input, faces, names, thickness=2):
    if faces[1] is not None:
        for idx, face in enumerate(faces[1][:3]):
            coords = face[:-1].astype(np.int32)
            cv.rectangle(input, (coords[0], coords[1]), (coords[0]+coords[2], coords[1]+coords[3]), (0, 255, 0), thickness)
            cv.putText(input, names[idx], (coords[0], coords[1]-10), cv.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
    return input

# H√†m nh·∫≠n di·ªán khu√¥n m·∫∑t
def recognize_faces(img):
    img = cv.cvtColor(img, cv.COLOR_RGB2BGR)
    frameHeight, frameWidth = img.shape[:2]
    face_detector.setInputSize((frameWidth, frameHeight))
    
    faces = face_detector.detect(img)
    names = []

    if faces[1] is not None:
        for face in faces[1][:3]:
            face_align = face_recognizer.alignCrop(img, face)
            face_feature = face_recognizer.feature(face_align)

            similarity_score = svc.decision_function(face_feature.reshape(1, -1))
            max_similarity = np.max(similarity_score)

            threshold = 0.5
            if max_similarity > threshold:
                test_predict = svc.predict(face_feature)
                names.append(mydict[test_predict[0]])
            else:
                names.append("Unknown")

    result = visualize(img, faces, names)
    result = cv.cvtColor(result, cv.COLOR_BGR2RGB)
    return result

# Giao di·ªán Streamlit
st.set_page_config(page_title="Nh·∫≠n di·ªán khu√¥n m·∫∑t", layout="wide")
st.title("üîç H·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t")

# T·∫°o 2 c·ªôt ch·ªçn ch·∫ø ƒë·ªô
col1, col2 = st.columns(2)
with col1:
    mode = st.radio("Ch·ªçn ch·∫ø ƒë·ªô:", ('·∫¢nh tƒ©nh', 'Webcam'), index=0, horizontal=True)

# Ph·∫ßn n·ªôi dung ch√≠nh
if mode == '·∫¢nh tƒ©nh':
    st.header("üì∑ Nh·∫≠n di·ªán t·ª´ ·∫£nh tƒ©nh")
    uploaded_file = st.file_uploader("T·∫£i ·∫£nh l√™n", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        # Hi·ªÉn th·ªã 2 c·ªôt ·∫£nh
        col1, col2 = st.columns(2)
        img = Image.open(uploaded_file)
        img = np.array(img)
        
        # C·ªôt tr√°i: Hi·ªÉn th·ªã ·∫£nh t·∫£i l√™n
        with col1:
            st.image(img, caption="·∫¢nh t·∫£i l√™n", use_container_width=True)

        # C·ªôt ph·∫£i: Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£ nh·∫≠n di·ªán (c√πng k√≠ch th∆∞·ªõc v·ªõi ·∫£nh t·∫£i l√™n)
        with col2:
            output_img = recognize_faces(img)
            st.image(output_img, caption="K·∫øt qu·∫£ nh·∫≠n di·ªán", use_container_width=True)  

elif mode == 'Webcam':
    st.header("üé• Nh·∫≠n di·ªán t·ª´ Webcam")
    if 'webcam' not in st.session_state:
        st.session_state['webcam'] = False

    start_button = st.button('‚ñ∂Ô∏è Start Webcam')
    stop_button = st.button('‚èπÔ∏è Stop Webcam')

    FRAME_WINDOW = st.image([])

    cap = cv.VideoCapture(0)

    if start_button:
        st.session_state['webcam'] = True
    if stop_button:
        st.session_state['webcam'] = False

    if st.session_state['webcam']:
        while st.session_state['webcam']:
            ret, frame = cap.read()
            if not ret:
                st.warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c h√¨nh ·∫£nh t·ª´ webcam.")
                break
            frame = cv.cvtColor(frame, cv.COLOR_BGR2RGB)
            result = recognize_faces(frame)
            FRAME_WINDOW.image(result, use_container_width=True)  
    cap.release()
