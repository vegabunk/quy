import streamlit as st
import time
import base64
import os
import cv2

# === T·∫Øt log/c·∫£nh b√°o c·ªßa OpenCV m·ªôt c√°ch ph√≤ng v·ªá ===
try:
    # N·∫øu c√≥ module utils.logging (OpenCV ‚â•4.x)
    log = getattr(cv2.utils, "logging", None)
    if log:
        log.setLogLevel(log.ERROR)
    # Ng∆∞·ª£c l·∫°i th·ª≠ d√πng setLogLevel tr·ª±c ti·∫øp
    elif hasattr(cv2, "setLogLevel"):
        cv2.setLogLevel(cv2.LOG_LEVEL_ERROR)
except Exception:
    pass

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="N·ªôi dung m√¥n h·ªçc",
    page_icon="üì∏",
    layout="wide"
)

# H√†m ƒë·ªçc file v√† m√£ h√≥a Base64 (d√πng cho video background)
def get_base64(path):
    with open(path, "rb") as f:
        return base64.b64encode(f.read()).decode()

# ƒê∆∞·ªùng d·∫´n video n·ªÅn & l·∫•y Base64
video_path = "resources/videos/background_11.mp4"
video_b64 = get_base64(video_path) if os.path.exists(video_path) else ""

# CSS + HTML ƒë·ªÉ hi·ªÉn th·ªã video n·ªÅn v√† overlay
css = f"""
<style>
  /* --- GI·ªÆ NGUY√äN TO√ÄN B·ªò CSS G·ªêC C·ª¶A B·∫†N --- */
  .video-bg {{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: -1;
  }}
  .overlay {{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    z-index: 0;
  }}
  .frame-common {{
    background: rgba(255,255,255,0.8);
    border-radius: 10px;
    padding: 30px;
    margin: 20px;
  }}
  .big-text {{ font-size: 2.5rem; font-weight: bold; }}
  .sub-text {{ font-size: 1.2rem; }}
  .main-text {{ font-size: 1.5rem; font-weight: 500; }}
  /* ... (c√°c style kh√°c n·∫øu c√≥) ... */
</style>
<video class="video-bg" autoplay muted loop>
  <source src="data:video/mp4;base64,{video_b64}" type="video/mp4">
</video>
<div class="overlay"></div>
"""
st.markdown(css, unsafe_allow_html=True)

# ƒê·ªãnh nghƒ©a c√°c trang con v√† ƒë∆∞·ªùng d·∫´n file
dict_pages = {
    "Nh·∫≠n di·ªán khu√¥n m·∫∑t": "my_pages/1_nhan_dien_khuon_mat.py",
    "Ph√°t hi·ªán v√† nh·∫≠n d·∫°ng ƒë·ªëi t∆∞·ª£ng": "my_pages/2_phat_hien_doi_tuong.py",
    "Th·ªã gi√°c m√°y": "my_pages/thi_giac_may.py",
    "C√°c ·ª©ng d·ª•ng ": "my_pages/cac_ung_dung_khac.py"
}

# Kh·ªüi t·∫°o bi·∫øn l∆∞u trang hi·ªán t·∫°i
if "page" not in st.session_state:
    st.session_state.page = None

# Sidebar ƒë·ªÉ ch·ªçn trang
with st.sidebar:
    st.image("resources/images/hcmute_logo.png", use_container_width=True)
    st.markdown('<div class="big-text">üìö N·ªòI DUNG M√îN H·ªåC</div>', unsafe_allow_html=True)
    if st.session_state.page is None:
        for name, file in dict_pages.items():
            if st.button(name, label_visibility="visible"):
                st.session_state.page = file
                st.rerun()
    else:
        if st.button("‚¨ÖÔ∏è Quay v·ªÅ trang ch·ªß", label_visibility="visible"):
            st.session_state.page = None
            st.rerun()

# Ph·∫ßn n·ªôi dung ch√≠nh
if st.session_state.page is None:
    # M√†n h√¨nh ch√†o m·ª´ng
    st.markdown('''
      <div class="frame-common" style="text-align:center;">
        <div class="big-text">CH√ÄO M·ª™NG B·∫†N ƒê·∫æN V·ªöI M√îN TH·ªä GI√ÅC M√ÅY</div>
        <div class="sub-text">Ch√∫ng m√¨nh t√™n l√† Nguy·ªÖn Th√†nh Qu√Ω v√† Ph·∫°m Gia Thi·ªÅu</div>
      </div>
    ''', unsafe_allow_html=True)

    # Gi·ªõi thi·ªáu n·ªôi dung m√¥n h·ªçc
    st.markdown('''
      <div class="frame-common">
        <div class="big-text">N·ªòI DUNG M√îN H·ªåC</div>
        <ul>
          <li class="sub-text">Nh·∫≠n di·ªán khu√¥n m·∫∑t</li>
          <li class="sub-text">Nh·∫≠n d·∫°ng v√† ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng</li>
          <li class="sub-text">Th·ªã gi√°c m√°y</li>
          <li class="sub-text">C√°c ·ª©ng d·ª•ng</li>
        </ul>
      </div>
    ''', unsafe_allow_html=True)

    # H∆∞·ªõng d·∫´n ch·ªçn ·ªü sidebar
    st.markdown('''
      <div class="frame-common">
        <div class="main-text">üëà H√£y ch·ªçn n·ªôi dung h·ªçc ·ªü thanh b√™n tr√°i nh√©!</div>
      </div>
    ''', unsafe_allow_html=True)

else:
    # Khi ƒë√£ ch·ªçn m·ªôt trang con, load file b√™n ngo√†i
    with st.spinner("ƒêang t·∫£i n·ªôi dung..."):
        time.sleep(1)
        try:
            exec(open(st.session_state.page, "r", encoding="utf-8").read())
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi t·∫£i n·ªôi dung: {e}")
